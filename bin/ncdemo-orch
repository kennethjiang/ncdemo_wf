#!/usr/bin/env python

"""

ncdemo-orch kicks off the message listener that will orchestrate the privisioning of an "enviroment"

"""
from __future__ import with_statement

import os
import sys
import getopt
import ConfigParser

# If ../ncdemo/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir, 'ncdemo', '__init__.py')):
    sys.path.insert(0, possible_topdir)

from ncdemo import consumers

PREF_VERBOSE = 'verbose'
PREF_HELP = 'help'
PREF_CONFIG_FILE = 'config_file'

# set default otions
prefs = {
    PREF_VERBOSE : 0,
    PREF_CONFIG_FILE : ''
}

def getPrefs():
    """
    Parse the commandline options.
    Store options in the global 'prefs' dict,
      and return the remaining arguments.
    """
    try:
        opts, args = getopt.getopt(sys.argv[1:],"hvc:")
    except:
        usage(sys.stderr)
        sys.exit(2)

    for o, a in opts:
        if o == '-h':
            prefs[PREF_HELP] = 1
        elif o == '-v':
            prefs[PREF_VERBOSE] += 1
	elif o == '-c':
	    prefs[PREF_CONFIG_FILE] = a
    return args

def log(msg, priority=1):
    """ print the given message iff the verbose level is high enough """
    if prefs[PREF_VERBOSE] >= priority:
        print >> sys.stderr, msg

def usage(output):
    print >> output, """Usage: %s [-hv] [-c config_file]
  -h: print this help message
  -v: verbose mode
  -c config_file: specified a config file. If absent, ncdemo-orchestator/../ncdemo.ini and then /etc/ncdemo.ini will be tried.
""" % os.path.basename(sys.argv[0])

def main():
    args = getPrefs()
    log("PREFS: %s" % prefs)
    if "help" in prefs:
        usage(sys.stdout)
        sys.exit(0)

    config = ConfigParser.ConfigParser()
    if not config.read([prefs[PREF_CONFIG_FILE], os.path.dirname(os.path.realpath(__file__)) + '/../ncdemo.ini', '/etc/ncdemo.ini']):
    	print >>os.stderr, "Error: No config file can be found"
	usage(os.stderr)
	sys.exit(3)

    consumers.start_all_consumers(config.get('DEFAULT', 'amqp_url'))


if __name__ == "__main__":
    sys.exit(main())
