#!/usr/bin/env python

"""

ncdemo-orch kicks off the message listener that will orchestrate the privisioning of an "enviroment"

"""

import os
import sys
import getopt
import ConfigParser


# set default options
prefs = { 'verbose' : 0}
def getPrefs():
    """
    Parse the commandline options.
    Store options in the global 'prefs' dict,
      and return the remaining arguments.
    """
    try:
        opts, args = getopt.getopt(sys.argv[1:],"hvc:")
    except:
        usage(sys.stderr)
        sys.exit(2)

    for o, a in opts:
        if o == '-h':
            prefs['help'] = 1
        elif o == '-v':
            prefs['verbose'] += 1
	elif o == '-c':
	    prefs['config_file'] = a
    return args

def log(msg, priority=1):
    """ print the given message iff the verbose level is high enough """
    if prefs['verbose'] >= priority:
        print >> sys.stderr, msg

def usage(output):
    print >> output, """Usage: %s [-hv] [-c config_file]
  -h: print this help message
  -v: verbose mode
  -c config_file: specified a config file. If absent, ./ncdemo.ini and then /etc/ncdemo.ini will be tried.
""" % os.path.basename(sys.argv[0])

def main():
    args = getPrefs()
    log("PREFS: %s" % prefs)
    if "help" in prefs:
        usage(sys.stdout)
        sys.exit(0)
    config = ConfigParser.ConfigParser()
    if not config.read([prefs['config_file'], './ncdemo.ini', '/etc/ncdemo.ini']):
    	print >>os.stderr, "Error: No config file can be found"
	usage(os.stderr)
	sys.exit(3)

if __name__ == "__main__":
    sys.exit(main())
